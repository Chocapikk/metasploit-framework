# -*- coding: binary -*-

module Msf
module Exploit::Remote::HTTP::Spip

  include Msf::Exploit::Remote::HttpClient

  def initialize(info = {})
    super

    register_options([
      OptString.new('TARGETURI', [true, 'Path to Spip install', '/'])
    ])
  end

  # Determine Spip version
  #
  # @return [Rex::Version] Version as Rex::Version
  def spip_version
    res = send_request_cgi(
      'method' => 'GET',
      'uri'    => normalize_uri(target_uri.path, "spip.php")
    )
  
    return unless res
    
    version = nil
    potential_sources = [
      res.get_html_document.at('head/meta[@name="generator"]/@content')&.text,
      res.headers['Composed-By']
    ]
  
    potential_sources.each do |text|
      next unless text
  
      if text =~ /SPIP\s(\d+(\.\d+)+)/
        version = ::Regexp.last_match(1)
        break
      end
    end
  
    return version ? Rex::Version.new(version) : nil
  end  
end
end
